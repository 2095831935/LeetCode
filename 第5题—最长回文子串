一、暴力法
  1、回文子串的一个特点是“头尾字符肯定相同”。由此先遍历整个字符串，先找到首尾相同的子字符串，然后判断该字符串是否为回文子串
  2、若该子串是回文子串，则与现存的最长回文子串比较，若该子串更长，则更新最长回文子串，否则继续寻找遍历下一个首尾相同的子串。
  显然，该方法属于暴力法之一，所需时间较长。
  代码如下：
  class Solution:
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        def isPalindrome(x):        # 判断是否是回文字符串
            """
            :type x: int
            :rtype: bool
            """
            length = len(x)
            if length == 0:
                return False
            if length == 1:
                return True
            xReverse = x[::-1]
            if xReverse == x:
                return True
            else:
                return False
                
        length = len(s)
        if length == 0:
            return ""
        if length == 1:
            return s
        i = 0
        lengthOfPalindrome = 1
        palindrome = s[0]
        while i < length:             # 遍历整个字符串，寻找首尾相同的子串，并判断是否为回文串及是否更新
            j = i + 1
            while j < length:
                if s[i] == s[j]:
                    subString = s[i:j+1]
                    if isPalindrome(subString):
                        if j - i + 1 > lengthOfPalindrome:
                            lengthOfPalindrome = j - i + 1
                            palindrome = subString
                j += 1
            i += 1
        return palindrome
   

二、最长公共子串
（1）、利用[动态规划方法](https://www.cnblogs.com/ider/p/longest-common-substring-problem-optimization.html#https://www.cnblogs.com/ider/p/longest-common-substring-problem-optimization.html “悬停显示”) 去寻找字符串s与其反转字符串s'的最长公共子串
      再寻找过程中，对每个最长公共子串的候选项进行判断是不是为回文串，由于寻找最长公共子串的方法的时间复杂度为O(n^{2})，判断是否为回文串的时间复杂度为）O(n)，因此总的时间复杂度为O(n^{3})，与暴力法的时间复杂度相同
（2）、利用后缀树结构寻找最长公共子串……
